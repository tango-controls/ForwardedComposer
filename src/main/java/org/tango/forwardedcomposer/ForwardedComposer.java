/*----- PROTECTED REGION ID(ForwardedComposer.java) ENABLED START -----*/
//=============================================================================
//
// file :        ForwardedComposer.java
//
// description : Java source for the ForwardedComposer class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               ForwardedComposer are implemented in this file.
//
// project :     Forwarded Composer
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
// Copyright (C): 2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017
//                European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                France
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

/*----- PROTECTED REGION END -----*/	//	ForwardedComposer.java

package org.tango.forwardedcomposer;

/*----- PROTECTED REGION ID(ForwardedComposer.imports) ENABLED START -----*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.ext.XLogger;
import org.slf4j.ext.XLoggerFactory;
import org.tango.server.InvocationContext;
import org.tango.server.ServerManager;
import org.tango.server.annotation.*;
import org.tango.server.attribute.AttributeValue;
import org.tango.server.attribute.ForwardedAttribute;
import org.tango.server.device.DeviceManager;
import org.tango.server.dynamic.DynamicManager;
import org.tango.utils.DevFailedUtils;

//	Import Tango IDL types
import fr.esrf.Tango.DevFailed;
import fr.esrf.Tango.DevState;

/*----- PROTECTED REGION END -----*/	//	ForwardedComposer.imports

/**
 *  ForwardedComposer class description:
 *    A facade device based on forwarded dynamic attributes.
 */

@Device
public class ForwardedComposer {

	protected static final Logger logger = LoggerFactory.getLogger(ForwardedComposer.class);
	protected static final XLogger xlogger = XLoggerFactory.getXLogger(ForwardedComposer.class);
	//========================================================
	//	Programmer's data members
	//========================================================
    /*----- PROTECTED REGION ID(ForwardedComposer.variables) ENABLED START -----*/
    
    //	Put static variables here
    
    /*----- PROTECTED REGION END -----*/	//	ForwardedComposer.variables
	/*----- PROTECTED REGION ID(ForwardedComposer.private) ENABLED START -----*/
	
	//	Put private variables here
	private boolean propertyOK = true;
	/*----- PROTECTED REGION END -----*/	//	ForwardedComposer.private

	//========================================================
	//	Property data members and related methods
	//========================================================
	/**
	 * Device Property ForwardedAttributes
	 * List of forwarded attributes.
	 * Syntax:  [attribute name], [root attribute]
	 */
	@DeviceProperty(name="ForwardedAttributes", description="List of forwarded attributes.\nSyntax:  [attribute name], [root attribute]"  , isMandatory=true)
	private String[] forwardedAttributes;
	/**
	 * set property ForwardedAttributes
	 * @param  forwardedAttributes  see description above.
	 */
	public void setForwardedAttributes(String[] forwardedAttributes) {
		this.forwardedAttributes = forwardedAttributes;
		/*----- PROTECTED REGION ID(ForwardedComposer.setForwardedAttributes) ENABLED START -----*/
		
		//	Check property value here
		
		/*----- PROTECTED REGION END -----*/	//	ForwardedComposer.setForwardedAttributes
	}
	
	/**
	 * Device Property ReadOnly
	 * Forwarded attribute will be read only.
	 */
	@DeviceProperty(name="ReadOnly", description="Forwarded attribute will be read only." ,
	        defaultValue={ "true" } )
	private boolean readOnly;
	/**
	 * set property ReadOnly
	 * @param  readOnly  see description above.
	 */
	public void setReadOnly(boolean readOnly) {
		this.readOnly = readOnly;
		/*----- PROTECTED REGION ID(ForwardedComposer.setReadOnly) ENABLED START -----*/
		
		//	Check property value here
		
		/*----- PROTECTED REGION END -----*/	//	ForwardedComposer.setReadOnly
	}
	


	//========================================================
	//	Miscellaneous methods
	//========================================================
	/**
	 * Initialize the device.
	 * 
	 * @throws DevFailed if something fails during the device initialization.
	 */
	@Init(lazyLoading = false)
	public void initDevice() throws DevFailed {
		xlogger.entry();
		logger.debug("init device " + deviceManager.getName());
		/*----- PROTECTED REGION ID(ForwardedComposer.initDevice) ENABLED START -----*/
		for (String line : forwardedAttributes) {
			int idx = line.indexOf(",");
			if (idx<0) {
				propertyOK = false;
				setStatus("Syntax error in \'ForwardedAttributes\' property ',' missing in line:\n  "+ line);
			}
			buildForwardedAttribute(line, idx);
		}
		if (propertyOK) {
			setState(DevState.ON);
			setStatus("Everything OK");
		}
		/*----- PROTECTED REGION END -----*/	//	ForwardedComposer.initDevice
		xlogger.exit();
	}

	/**
	 * all resources may be closed here. Collections may be also cleared.
	 * 
	 * @throws DevFailed if something fails during the device object deletion.
	 */
	@Delete
	public void deleteDevice() throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(ForwardedComposer.deleteDevice) ENABLED START -----*/
		
		//	Put your device clearing code here
		
		/*----- PROTECTED REGION END -----*/	//	ForwardedComposer.deleteDevice
		xlogger.exit();
	}

	/**
	 * Method called before and after command and attribute calls.
	 * @param ctx the invocation context
	 * @throws DevFailed if something fails during this method execution.
	 */
	@AroundInvoke
	public void aroundInvoke(final InvocationContext ctx) throws DevFailed {
		xlogger.entry();
			/*----- PROTECTED REGION ID(ForwardedComposer.aroundInvoke) ENABLED START -----*/
		if(!propertyOK) {
			DevFailedUtils.throwDevFailed(getStatus());
		}
			/*----- PROTECTED REGION END -----*/	//	ForwardedComposer.aroundInvoke
		xlogger.exit();
	}

	
	/**
	 * dynamic command and attribute management. Will be injected by the framework.
	 */
	@DynamicManagement
	protected DynamicManager dynamicManager;
	/**
	 * @param dynamicManager the DynamicManager instance 
	 * @throws DevFailed if something fails during this method execution.
	 */
	public void setDynamicManager(final DynamicManager dynamicManager) throws DevFailed {
		this.dynamicManager = dynamicManager;
		/*----- PROTECTED REGION ID(ForwardedComposer.setDynamicManager) ENABLED START -----*/
		
		//	Put your code here
		
		/*----- PROTECTED REGION END -----*/	//	ForwardedComposer.setDynamicManager
	}
	
	/**
	 * Device management. Will be injected by the framework.
	 */
	@DeviceManagement
	DeviceManager deviceManager;
	public void setDeviceManager(DeviceManager deviceManager){
		this.deviceManager= deviceManager ;
	}




	//========================================================
	//	Command data members and related methods
	//========================================================
	/**
	 * The state of the device
	*/
	@State 
	private DevState state = DevState.UNKNOWN;
	/**
	 * Execute command "State".
	 * description: This command gets the device state (stored in its 'state' data member) and returns it to the caller.
	 * @return Device state
	 * @throws DevFailed if command execution failed.
	 */
	public final DevState getState() throws DevFailed {
		/*----- PROTECTED REGION ID(ForwardedComposer.getState) ENABLED START -----*/
		
		//	Put state code here
		
		/*----- PROTECTED REGION END -----*/	//	ForwardedComposer.getState
		return state;
	}
	/**
	 * Set the device state
	 * @param state the new device state
	 */
	public void setState(final DevState state) {
		this.state = state;
	}
	
	/**
	 * The status of the device
	 */
	@Status 
	private String status = "Server is starting. The device state is unknown";
	/**
	 * Execute command "Status".
	 * description: This command gets the device status (stored in its 'status' data member) and returns it to the caller.
	 * @return Device status
	 * @throws DevFailed if command execution failed.
	 */
	public final String getStatus() throws DevFailed {
		/*----- PROTECTED REGION ID(ForwardedComposer.getStatus) ENABLED START -----*/
		
		//	Put status code here
		
		/*----- PROTECTED REGION END -----*/	//	ForwardedComposer.getStatus
		return status;
	}
	/**
	 * Set the device status
	 * @param status the new device status
	 */
	public void setStatus(final String status) {
		this.status = status;
	}
	

	//========================================================
	//	Programmer's methods
	//========================================================
	/*----- PROTECTED REGION ID(ForwardedComposer.methods) ENABLED START -----*/
	//	RO forwarded attribute class
	public static class ReadOnlyForwardedAttribute extends ForwardedAttribute {
		private boolean readOnly;
		public ReadOnlyForwardedAttribute(String fullRootAttributeName,
										  String attributeName, String defaultLabel, boolean readOnly) throws DevFailed {
			super(fullRootAttributeName, attributeName, defaultLabel);
			this.readOnly = readOnly;
		}

		@Override
		public void setValue(AttributeValue value) throws DevFailed {
			if (readOnly)
				throw DevFailedUtils.newDevFailed("ReadOnly attribute!!!");
		}
	}

	private void buildForwardedAttribute(String line, int idx) throws DevFailed {
		String attributeName = line.substring(0, idx).trim();
		String rootAttribute = line.substring(++idx).trim();
		if (rootAttribute.isEmpty()) {
			if (idx<0) {
				propertyOK = false;
				setStatus("Syntax error in \'ForwardedAttributes\' property.\n" +
						"root attribute name empty in line:\n  "+ line);
			}
		}
		checkAttributeName(attributeName, line);

		System.out.println("Adding forwarded attribute " + attributeName + " where root is " + rootAttribute);
		ForwardedAttribute forwardedAttribute =
				new ReadOnlyForwardedAttribute(rootAttribute, attributeName, attributeName, readOnly);
		dynamicManager.addAttribute(forwardedAttribute);
	}

	private void checkAttributeName(String attributeName, String line) throws DevFailed {
		String[] unexpected = {
				" ", "\n", ":", "?", ".", "(", ")", "*", "&", "^",
				"%", "$", "#", "!", "[", "]", "{", "}", "-", "=",
		};
		if (attributeName==null || attributeName.isEmpty()) {
			propertyOK = false;
			setStatus("Syntax error in \'ForwardedAttributes\' property\n" +
					"Attribute name empty in line:\n  "+ line);
		}
		else
		for (String c : unexpected) {
			if (attributeName.contains(c)) {
				propertyOK = false;
				setStatus("Syntax error in \'ForwardedAttributes\' property in attribute name line:\n  "+ line);
			}
		}
	}

	/*----- PROTECTED REGION END -----*/	//	ForwardedComposer.methods


	
	
	
	
	/**
	 * Starts the server.
	 * @param args program arguments (instance_name [-v[trace level]]  [-nodb [-dlist <device name list>] [-file=fileName]])
	 */
	public static void main(final String[] args) {
		/*----- PROTECTED REGION ID(ForwardedComposer.main) ENABLED START -----*/
		
		/*----- PROTECTED REGION END -----*/	//	ForwardedComposer.main
		ServerManager.getInstance().start(args, ForwardedComposer.class);
		System.out.println("------- Started -------------");
	}
}
